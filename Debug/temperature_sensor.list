
temperature_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b60  08002b60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b60  08002b60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002b74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002b74  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a99  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000164a  00000000  00000000  00027b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  00029160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000583  00000000  00000000  00029898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163b5  00000000  00000000  00029e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f81  00000000  00000000  000401d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080dfb  00000000  00000000  00049151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d18  00000000  00000000  000c9f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cbc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ac0 	.word	0x08002ac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002ac0 	.word	0x08002ac0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t *welcome_msg = {"Welcome to STM \r\nTemperature sensor interface \r\n"};
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0x64>)
 8000774:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fad5 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f82f 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f8f1 	bl	8000964 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000782:	f000 f887 	bl	8000894 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f8c3 	bl	8000910 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, welcome_msg, strlen(welcome_msg), 40);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fce0 	bl	8000150 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	2328      	movs	r3, #40	; 0x28
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x68>)
 800079a:	f001 ffe5 	bl	8002768 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x6c>)
 80007a0:	f000 fc1e 	bl	8000fe0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80007a4:	2164      	movs	r1, #100	; 0x64
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0x6c>)
 80007a8:	f000 fcf4 	bl	8001194 <HAL_ADC_PollForConversion>
	  ADC_val = HAL_ADC_GetValue(&hadc1);
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0x6c>)
 80007ae:	f000 fdf7 	bl	80013a0 <HAL_ADC_GetValue>
 80007b2:	4603      	mov	r3, r0
 80007b4:	807b      	strh	r3, [r7, #2]
	  HAL_ADC_Stop(&hadc1);
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <main+0x6c>)
 80007b8:	f000 fcc0 	bl	800113c <HAL_ADC_Stop>
	  temp_conv(ADC_val);
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f90e 	bl	80009e0 <temp_conv>
	  HAL_Delay(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c8:	f000 fb0e 	bl	8000de8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80007cc:	e7e7      	b.n	800079e <main+0x32>
 80007ce:	bf00      	nop
 80007d0:	08002ad8 	.word	0x08002ad8
 80007d4:	20000058 	.word	0x20000058
 80007d8:	20000028 	.word	0x20000028

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	; 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f93c 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000828:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f9cc 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800083e:	f000 f95d 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fc38 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800086a:	f000 f947 	bl	8000afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800086e:	2302      	movs	r3, #2
 8000870:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fdb8 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000886:	f000 f939 	bl	8000afc <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_ADC1_Init+0x74>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <MX_ADC1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADC1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_ADC1_Init+0x74>)
 80008be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_ADC1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_ADC1_Init+0x74>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_ADC1_Init+0x74>)
 80008d2:	f000 faad 	bl	8000e30 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f90e 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC1_Init+0x74>)
 80008f2:	f000 fd61 	bl	80013b8 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008fc:	f000 f8fe 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000028 	.word	0x20000028
 800090c:	40012400 	.word	0x40012400

08000910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART1_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART1_UART_Init+0x4c>)
 8000948:	f001 febe 	bl	80026c8 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f8d3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000058 	.word	0x20000058
 8000960:	40013800 	.word	0x40013800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_GPIO_Init+0x74>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <MX_GPIO_Init+0x74>)
 800097e:	f043 0320 	orr.w	r3, r3, #32
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_GPIO_Init+0x74>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0320 	and.w	r3, r3, #32
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x74>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <MX_GPIO_Init+0x74>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_GPIO_Init+0x74>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2104      	movs	r1, #4
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0x78>)
 80009ae:	f001 f8f7 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b2:	2304      	movs	r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0x78>)
 80009ca:	f000 ff6d 	bl	80018a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010800 	.word	0x40010800

080009e0 <temp_conv>:

/* USER CODE BEGIN 4 */
void temp_conv(uint16_t temp_var)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
	uint32_t var1 = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
	var1 = (temp_var*12.15);       //12.15  //12.153
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe31 	bl	8000658 <__aeabi_i2d>
 80009f6:	a30e      	add	r3, pc, #56	; (adr r3, 8000a30 <temp_conv+0x50>)
 80009f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fc:	f7ff fbb0 	bl	8000160 <__aeabi_dmul>
 8000a00:	4602      	mov	r2, r0
 8000a02:	460b      	mov	r3, r1
 8000a04:	4610      	mov	r0, r2
 8000a06:	4619      	mov	r1, r3
 8000a08:	f7ff fe90 	bl	800072c <__aeabi_d2uiz>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, "temp: ", 6, 10);
 8000a10:	230a      	movs	r3, #10
 8000a12:	2206      	movs	r2, #6
 8000a14:	4908      	ldr	r1, [pc, #32]	; (8000a38 <temp_conv+0x58>)
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <temp_conv+0x5c>)
 8000a18:	f001 fea6 	bl	8002768 <HAL_UART_Transmit>
	print_char(var1);
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 f80f 	bl	8000a40 <print_char>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	f3af 8000 	nop.w
 8000a30:	cccccccd 	.word	0xcccccccd
 8000a34:	40284ccc 	.word	0x40284ccc
 8000a38:	08002b0c 	.word	0x08002b0c
 8000a3c:	20000058 	.word	0x20000058

08000a40 <print_char>:
void print_char(uint32_t num_var)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint8_t char_num_var[] = {"000000\r\n"};
 8000a48:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <print_char+0xb0>)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a50:	c303      	stmia	r3!, {r0, r1}
 8000a52:	701a      	strb	r2, [r3, #0]
	uint8_t i = 5;
 8000a54:	2305      	movs	r3, #5
 8000a56:	75fb      	strb	r3, [r7, #23]
	while( num_var != 0)
 8000a58:	e026      	b.n	8000aa8 <print_char+0x68>
	{
		char_num_var[i] = (num_var%10)+48 ;
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <print_char+0xb4>)
 8000a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	1aca      	subs	r2, r1, r3
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	3230      	adds	r2, #48	; 0x30
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	3318      	adds	r3, #24
 8000a78:	443b      	add	r3, r7
 8000a7a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		num_var = num_var/10;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <print_char+0xb4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	607b      	str	r3, [r7, #4]
		i--;
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	75fb      	strb	r3, [r7, #23]
		if(i == 3)
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d108      	bne.n	8000aa8 <print_char+0x68>
		{
			char_num_var[i] = '.';
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	3318      	adds	r3, #24
 8000a9a:	443b      	add	r3, r7
 8000a9c:	222e      	movs	r2, #46	; 0x2e
 8000a9e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			i--;
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	75fb      	strb	r3, [r7, #23]
	while( num_var != 0)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1d5      	bne.n	8000a5a <print_char+0x1a>
		}
	}
	char_num_var[i] = (num_var%10) +48;
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <print_char+0xb4>)
 8000ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1aca      	subs	r2, r1, r3
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	3230      	adds	r2, #48	; 0x30
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	3318      	adds	r3, #24
 8000acc:	443b      	add	r3, r7
 8000ace:	f803 2c0c 	strb.w	r2, [r3, #-12]

	HAL_UART_Transmit(&huart1, &char_num_var[0], 8, 15);
 8000ad2:	f107 010c 	add.w	r1, r7, #12
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <print_char+0xb8>)
 8000adc:	f001 fe44 	bl	8002768 <HAL_UART_Transmit>
	HAL_Delay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 f981 	bl	8000de8 <HAL_Delay>

}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08002b14 	.word	0x08002b14
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	20000058 	.word	0x20000058

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_MspInit+0x60>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_MspInit+0x60>)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_ADC_MspInit+0x6c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d121      	bne.n	8000bd0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_ADC_MspInit+0x70>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_ADC_MspInit+0x74>)
 8000bcc:	f000 fe6c 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c4a:	f000 fe2d 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c64:	f000 fe20 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f875 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
	...

08000cd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff fff7 	bl	8000cca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cde:	490c      	ldr	r1, [pc, #48]	; (8000d10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cf4:	4c09      	ldr	r4, [pc, #36]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 feb9 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff fd31 	bl	800076c <main>
  bx lr
 8000d0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08002b68 	.word	0x08002b68
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	200000a4 	.word	0x200000a4

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x28>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x28>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 fd83 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fee2 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fd8d 	bl	800188e <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 fd63 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200000a0 	.word	0x200000a0

08000dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	200000a0 	.word	0x200000a0

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff fff0 	bl	8000dd4 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffe0 	bl	8000dd4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0be      	b.n	8000fd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fe7c 	bl	8000b6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 fbf1 	bl	800165c <ADC_ConversionStop_Disable>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 8099 	bne.w	8000fbe <HAL_ADC_Init+0x18e>
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8095 	bne.w	8000fbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e9c:	f023 0302 	bic.w	r3, r3, #2
 8000ea0:	f043 0202 	orr.w	r2, r3, #2
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7b1b      	ldrb	r3, [r3, #12]
 8000eb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec8:	d003      	beq.n	8000ed2 <HAL_ADC_Init+0xa2>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d102      	bne.n	8000ed8 <HAL_ADC_Init+0xa8>
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	e000      	b.n	8000eda <HAL_ADC_Init+0xaa>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7d1b      	ldrb	r3, [r3, #20]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d119      	bne.n	8000f1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b1b      	ldrb	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	035a      	lsls	r2, r3, #13
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e00b      	b.n	8000f1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f043 0220 	orr.w	r2, r3, #32
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_ADC_Init+0x1a8>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f4c:	d003      	beq.n	8000f56 <HAL_ADC_Init+0x126>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d104      	bne.n	8000f60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	051b      	lsls	r3, r3, #20
 8000f5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_Init+0x1ac>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d10b      	bne.n	8000f9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f9a:	e018      	b.n	8000fce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f023 0312 	bic.w	r3, r3, #18
 8000fa4:	f043 0210 	orr.w	r2, r3, #16
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	f043 0201 	orr.w	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fbc:	e007      	b.n	8000fce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	f043 0210 	orr.w	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000fdc:	ff1f0efe 	.word	0xff1f0efe

08000fe0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Start+0x1a>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e098      	b.n	800112c <HAL_ADC_Start+0x14c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fad0 	bl	80015a8 <ADC_Enable>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 8087 	bne.w	8001122 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a41      	ldr	r2, [pc, #260]	; (8001134 <HAL_ADC_Start+0x154>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d105      	bne.n	800103e <HAL_ADC_Start+0x5e>
 8001032:	4b41      	ldr	r3, [pc, #260]	; (8001138 <HAL_ADC_Start+0x158>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d115      	bne.n	800106a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d026      	beq.n	80010a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001068:	e01d      	b.n	80010a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <HAL_ADC_Start+0x158>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d004      	beq.n	800108a <HAL_ADC_Start+0xaa>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <HAL_ADC_Start+0x154>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10d      	bne.n	80010a6 <HAL_ADC_Start+0xc6>
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_ADC_Start+0x158>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	f023 0206 	bic.w	r2, r3, #6
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010be:	e002      	b.n	80010c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0202 	mvn.w	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010e6:	d113      	bne.n	8001110 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_ADC_Start+0x154>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d105      	bne.n	80010fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_ADC_Start+0x158>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d108      	bne.n	8001110 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	e00c      	b.n	800112a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e003      	b.n	800112a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40012800 	.word	0x40012800
 8001138:	40012400 	.word	0x40012400

0800113c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Stop+0x1a>
 8001152:	2302      	movs	r3, #2
 8001154:	e01a      	b.n	800118c <HAL_ADC_Stop+0x50>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fa7c 	bl	800165c <ADC_ConversionStop_Disable>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011aa:	f7ff fe13 	bl	8000dd4 <HAL_GetTick>
 80011ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	f043 0220 	orr.w	r2, r3, #32
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0d3      	b.n	800137e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d131      	bne.n	8001248 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d12a      	bne.n	8001248 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011f2:	e021      	b.n	8001238 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fa:	d01d      	beq.n	8001238 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_ADC_PollForConversion+0x7e>
 8001202:	f7ff fde7 	bl	8000dd4 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d212      	bcs.n	8001238 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f043 0204 	orr.w	r2, r3, #4
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0a2      	b.n	800137e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0d6      	beq.n	80011f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001246:	e070      	b.n	800132a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001248:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <HAL_ADC_PollForConversion+0x1f4>)
 800124a:	681c      	ldr	r4, [r3, #0]
 800124c:	2002      	movs	r0, #2
 800124e:	f001 f985 	bl	800255c <HAL_RCCEx_GetPeriphCLKFreq>
 8001252:	4603      	mov	r3, r0
 8001254:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6919      	ldr	r1, [r3, #16]
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_ADC_PollForConversion+0x1f8>)
 8001260:	400b      	ands	r3, r1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_ADC_PollForConversion+0x104>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d9      	ldr	r1, [r3, #12]
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <HAL_ADC_PollForConversion+0x1fc>)
 800126e:	400b      	ands	r3, r1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <HAL_ADC_PollForConversion+0x104>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6919      	ldr	r1, [r3, #16]
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_ADC_PollForConversion+0x200>)
 800127c:	400b      	ands	r3, r1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d108      	bne.n	8001294 <HAL_ADC_PollForConversion+0x100>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68d9      	ldr	r1, [r3, #12]
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_ADC_PollForConversion+0x204>)
 800128a:	400b      	ands	r3, r1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_ADC_PollForConversion+0x100>
 8001290:	2314      	movs	r3, #20
 8001292:	e020      	b.n	80012d6 <HAL_ADC_PollForConversion+0x142>
 8001294:	2329      	movs	r3, #41	; 0x29
 8001296:	e01e      	b.n	80012d6 <HAL_ADC_PollForConversion+0x142>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6919      	ldr	r1, [r3, #16]
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_ADC_PollForConversion+0x200>)
 80012a0:	400b      	ands	r3, r1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_ADC_PollForConversion+0x120>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68d9      	ldr	r1, [r3, #12]
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_ADC_PollForConversion+0x204>)
 80012ae:	400b      	ands	r3, r1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00d      	beq.n	80012d0 <HAL_ADC_PollForConversion+0x13c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6919      	ldr	r1, [r3, #16]
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_ADC_PollForConversion+0x208>)
 80012bc:	400b      	ands	r3, r1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <HAL_ADC_PollForConversion+0x140>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_ADC_PollForConversion+0x208>)
 80012ca:	400b      	ands	r3, r1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_PollForConversion+0x140>
 80012d0:	2354      	movs	r3, #84	; 0x54
 80012d2:	e000      	b.n	80012d6 <HAL_ADC_PollForConversion+0x142>
 80012d4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012dc:	e021      	b.n	8001322 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d01a      	beq.n	800131c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_ADC_PollForConversion+0x168>
 80012ec:	f7ff fd72 	bl	8000dd4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d20f      	bcs.n	800131c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d90b      	bls.n	800131c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e030      	b.n	800137e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	429a      	cmp	r2, r3
 8001328:	d8d9      	bhi.n	80012de <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 0212 	mvn.w	r2, #18
 8001332:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800134a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800134e:	d115      	bne.n	800137c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000
 800138c:	24924924 	.word	0x24924924
 8001390:	00924924 	.word	0x00924924
 8001394:	12492492 	.word	0x12492492
 8001398:	00492492 	.word	0x00492492
 800139c:	00249249 	.word	0x00249249

080013a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x20>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e0dc      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1da>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d81c      	bhi.n	8001422 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	221f      	movs	r2, #31
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3b05      	subs	r3, #5
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
 8001420:	e03c      	b.n	800149c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d81c      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b23      	subs	r3, #35	; 0x23
 800143c:	221f      	movs	r2, #31
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	4019      	ands	r1, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b23      	subs	r3, #35	; 0x23
 8001456:	fa00 f203 	lsl.w	r2, r0, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
 8001462:	e01b      	b.n	800149c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b41      	subs	r3, #65	; 0x41
 8001476:	221f      	movs	r2, #31
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b41      	subs	r3, #65	; 0x41
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d91c      	bls.n	80014de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	3b1e      	subs	r3, #30
 80014b6:	2207      	movs	r2, #7
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	3b1e      	subs	r3, #30
 80014d0:	fa00 f203 	lsl.w	r2, r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	e019      	b.n	8001512 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6919      	ldr	r1, [r3, #16]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	2207      	movs	r2, #7
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4019      	ands	r1, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6898      	ldr	r0, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	fa00 f203 	lsl.w	r2, r0, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d003      	beq.n	8001522 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800151e:	2b11      	cmp	r3, #17
 8001520:	d132      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_ADC_ConfigChannel+0x1e4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d125      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d126      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001548:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b10      	cmp	r3, #16
 8001550:	d11a      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9a      	lsrs	r2, r3, #18
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001568:	e002      	b.n	8001570 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_ConfigChannel+0x1b2>
 8001576:	e007      	b.n	8001588 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f043 0220 	orr.w	r2, r3, #32
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40012400 	.word	0x40012400
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d040      	beq.n	8001648 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <ADC_Enable+0xac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <ADC_Enable+0xb0>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015e4:	e002      	b.n	80015ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015f2:	f7ff fbef 	bl	8000dd4 <HAL_GetTick>
 80015f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f8:	e01f      	b.n	800163a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015fa:	f7ff fbeb 	bl	8000dd4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d918      	bls.n	800163a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d011      	beq.n	800163a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f043 0210 	orr.w	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e007      	b.n	800164a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d1d8      	bne.n	80015fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000
 8001658:	431bde83 	.word	0x431bde83

0800165c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d12e      	bne.n	80016d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001686:	f7ff fba5 	bl	8000dd4 <HAL_GetTick>
 800168a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800168c:	e01b      	b.n	80016c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800168e:	f7ff fba1 	bl	8000dd4 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d914      	bls.n	80016c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10d      	bne.n	80016c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f043 0210 	orr.w	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e007      	b.n	80016d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d0dc      	beq.n	800168e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff49 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff5e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb0 	bl	80017fc <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e161      	b.n	8001b80 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018bc:	2201      	movs	r2, #1
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8150 	bne.w	8001b7a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a97      	ldr	r2, [pc, #604]	; (8001b3c <HAL_GPIO_Init+0x294>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d05e      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018e4:	4a95      	ldr	r2, [pc, #596]	; (8001b3c <HAL_GPIO_Init+0x294>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d875      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018ea:	4a95      	ldr	r2, [pc, #596]	; (8001b40 <HAL_GPIO_Init+0x298>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d058      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018f0:	4a93      	ldr	r2, [pc, #588]	; (8001b40 <HAL_GPIO_Init+0x298>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d86f      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018f6:	4a93      	ldr	r2, [pc, #588]	; (8001b44 <HAL_GPIO_Init+0x29c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d052      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018fc:	4a91      	ldr	r2, [pc, #580]	; (8001b44 <HAL_GPIO_Init+0x29c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d869      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001902:	4a91      	ldr	r2, [pc, #580]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04c      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001908:	4a8f      	ldr	r2, [pc, #572]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d863      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800190e:	4a8f      	ldr	r2, [pc, #572]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d046      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001914:	4a8d      	ldr	r2, [pc, #564]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d85d      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d82a      	bhi.n	8001974 <HAL_GPIO_Init+0xcc>
 800191e:	2b12      	cmp	r3, #18
 8001920:	d859      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_GPIO_Init+0x80>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	080019a3 	.word	0x080019a3
 800192c:	0800197d 	.word	0x0800197d
 8001930:	0800198f 	.word	0x0800198f
 8001934:	080019d1 	.word	0x080019d1
 8001938:	080019d7 	.word	0x080019d7
 800193c:	080019d7 	.word	0x080019d7
 8001940:	080019d7 	.word	0x080019d7
 8001944:	080019d7 	.word	0x080019d7
 8001948:	080019d7 	.word	0x080019d7
 800194c:	080019d7 	.word	0x080019d7
 8001950:	080019d7 	.word	0x080019d7
 8001954:	080019d7 	.word	0x080019d7
 8001958:	080019d7 	.word	0x080019d7
 800195c:	080019d7 	.word	0x080019d7
 8001960:	080019d7 	.word	0x080019d7
 8001964:	080019d7 	.word	0x080019d7
 8001968:	080019d7 	.word	0x080019d7
 800196c:	08001985 	.word	0x08001985
 8001970:	08001999 	.word	0x08001999
 8001974:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197a:	e02c      	b.n	80019d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e029      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	3304      	adds	r3, #4
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e024      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	3308      	adds	r3, #8
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e01f      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	330c      	adds	r3, #12
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e01a      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019aa:	2304      	movs	r3, #4
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e013      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	611a      	str	r2, [r3, #16]
          break;
 80019c2:	e009      	b.n	80019d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c4:	2308      	movs	r3, #8
 80019c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	615a      	str	r2, [r3, #20]
          break;
 80019ce:	e003      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          break;
 80019d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d801      	bhi.n	80019e2 <HAL_GPIO_Init+0x13a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_Init+0x13e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d802      	bhi.n	80019f4 <HAL_GPIO_Init+0x14c>
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x152>
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3b08      	subs	r3, #8
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	210f      	movs	r1, #15
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80a9 	beq.w	8001b7a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3d      	ldr	r2, [pc, #244]	; (8001b5c <HAL_GPIO_Init+0x2b4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_GPIO_Init+0x1e0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_GPIO_Init+0x1dc>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_GPIO_Init+0x1d8>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x1e2>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x1e2>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x1e2>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9a:	492f      	ldr	r1, [pc, #188]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	492b      	ldr	r1, [pc, #172]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4921      	ldr	r1, [pc, #132]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	491d      	ldr	r1, [pc, #116]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4917      	ldr	r1, [pc, #92]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4913      	ldr	r1, [pc, #76]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01f      	beq.n	8001b6c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	490d      	ldr	r1, [pc, #52]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e01f      	b.n	8001b7a <HAL_GPIO_Init+0x2d2>
 8001b3a:	bf00      	nop
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10220000 	.word	0x10220000
 8001b48:	10210000 	.word	0x10210000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4909      	ldr	r1, [pc, #36]	; (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f ae96 	bne.w	80018bc <HAL_GPIO_Init+0x14>
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e272      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8087 	beq.w	8001cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d00c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d112      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
 8001c08:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d10b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x12c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d168      	bne.n	8001cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e24c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x76>
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7f      	ldr	r2, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7a      	ldr	r2, [pc, #488]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a77      	ldr	r2, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0xbc>
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a71      	ldr	r2, [pc, #452]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a67      	ldr	r2, [pc, #412]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f892 	bl	8000dd4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f88e 	bl	8000dd4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e200      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe4>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f87e 	bl	8000dd4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f87a 	bl	8000dd4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1ec      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x10c>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d16:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1c0      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4939      	ldr	r1, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f833 	bl	8000dd4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f82f 	bl	8000dd4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1a1      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4927      	ldr	r1, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f812 	bl	8000dd4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff f80e 	bl	8000dd4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e180      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7fe fff2 	bl	8000dd4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7fe ffee 	bl	8000dd4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e160      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 face 	bl	80023b4 <RCC_Delay>
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ffd8 	bl	8000dd4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe ffd4 	bl	8000dd4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d908      	bls.n	8001e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e146      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420000 	.word	0x42420000
 8001e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e9      	bne.n	8001e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a6 	beq.w	8001fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a87      	ldr	r2, [pc, #540]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b85      	ldr	r3, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b82      	ldr	r3, [pc, #520]	; (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7e      	ldr	r2, [pc, #504]	; (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ff95 	bl	8000dd4 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7fe ff91 	bl	8000dd4 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e103      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b75      	ldr	r3, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e02d      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a69      	ldr	r2, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	e01c      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x356>
 8001f0c:	4b61      	ldr	r3, [pc, #388]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a60      	ldr	r2, [pc, #384]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe ff45 	bl	8000dd4 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe ff41 	bl	8000dd4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0b1      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RCC_OscConfig+0x37e>
 8001f70:	e014      	b.n	8001f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ff2f 	bl	8000dd4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe ff2b 	bl	8000dd4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e09b      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8087 	beq.w	80020c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d061      	beq.n	8002088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d146      	bne.n	800205a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe feff 	bl	8000dd4 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fefb 	bl	8000dd4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e06d      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4921      	ldr	r1, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	430b      	orrs	r3, r1
 8002026:	491b      	ldr	r1, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x4cc>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fecf 	bl	8000dd4 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fecb 	bl	8000dd4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e03d      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x46a>
 8002058:	e035      	b.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x4cc>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe feb8 	bl	8000dd4 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe feb4 	bl	8000dd4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e026      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x498>
 8002086:	e01e      	b.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e019      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x500>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d0      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b67      	ldr	r3, [pc, #412]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4965      	ldr	r1, [pc, #404]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b8      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	494d      	ldr	r1, [pc, #308]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d040      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07f      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e073      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06b      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4936      	ldr	r1, [pc, #216]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fe06 	bl	8000dd4 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7fe fe02 	bl	8000dd4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e053      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d210      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4922      	ldr	r1, [pc, #136]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e032      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	490e      	ldr	r1, [pc, #56]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002262:	f000 f821 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	490a      	ldr	r1, [pc, #40]	; (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1cc>)
 800227c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd64 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40022000 	.word	0x40022000
 8002298:	40021000 	.word	0x40021000
 800229c:	08002b20 	.word	0x08002b20
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004

080022a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d002      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d003      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x36>
 80022d6:	e027      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	613b      	str	r3, [r7, #16]
      break;
 80022dc:	e027      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	fb03 f202 	mul.w	r2, r3, r2
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_RCC_GetSysClockFreq+0xa4>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	613b      	str	r3, [r7, #16]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	007a1200 	.word	0x007a1200
 8002344:	08002b38 	.word	0x08002b38
 8002348:	08002b48 	.word	0x08002b48
 800234c:	003d0900 	.word	0x003d0900

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_RCC_GetHCLKFreq+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff2 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	08002b30 	.word	0x08002b30

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffde 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08002b30 	.word	0x08002b30

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000000 	.word	0x20000000
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07d      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002426:	61d3      	str	r3, [r2, #28]
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d118      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002450:	f7fe fcc0 	bl	8000dd4 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	e008      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7fe fcbc 	bl	8000dd4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06d      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02e      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d027      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fc8b 	bl	8000dd4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fc87 	bl	8000dd4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4917      	ldr	r1, [pc, #92]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420440 	.word	0x42420440

0800255c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b10      	cmp	r3, #16
 8002582:	f200 808a 	bhi.w	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d045      	beq.n	8002618 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d075      	beq.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002592:	e082      	b.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800259a:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d07b      	beq.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	0c9b      	lsrs	r3, r3, #18
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80025b0:	5cd3      	ldrb	r3, [r2, r3]
 80025b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025d8:	4a38      	ldr	r2, [pc, #224]	; (80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	e004      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002600:	d102      	bne.n	8002608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	61bb      	str	r3, [r7, #24]
      break;
 8002606:	e04a      	b.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
      break;
 8002616:	e042      	b.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d108      	bne.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e01f      	b.n	800267c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002646:	d109      	bne.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002654:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e00f      	b.n	800267c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002666:	d11c      	bne.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002674:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002678:	61bb      	str	r3, [r7, #24]
      break;
 800267a:	e012      	b.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800267c:	e011      	b.n	80026a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800267e:	f7ff fe85 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0b9b      	lsrs	r3, r3, #14
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	61bb      	str	r3, [r7, #24]
      break;
 8002698:	e004      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800269a:	bf00      	nop
 800269c:	e002      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026a2:	bf00      	nop
    }
  }
  return (frequency);
 80026a4:	69bb      	ldr	r3, [r7, #24]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08002b4c 	.word	0x08002b4c
 80026b8:	08002b5c 	.word	0x08002b5c
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	003d0900 	.word	0x003d0900
 80026c4:	aaaaaaab 	.word	0xaaaaaaab

080026c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e042      	b.n	8002760 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fa78 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f91d 	bl	800294c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	d16d      	bne.n	8002864 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Transmit+0x2c>
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e066      	b.n	8002866 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fb15 	bl	8000dd4 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d108      	bne.n	80027d4 <HAL_UART_Transmit+0x6c>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e003      	b.n	80027dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027dc:	e02a      	b.n	8002834 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f840 	bl	800286e <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e036      	b.n	8002866 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800280c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3302      	adds	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e007      	b.n	8002826 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3301      	adds	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1cf      	bne.n	80027de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f810 	bl	800286e <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e006      	b.n	8002866 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b090      	sub	sp, #64	; 0x40
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287e:	e050      	b.n	8002922 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d04c      	beq.n	8002922 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <UART_WaitOnFlagUntilTimeout+0x30>
 800288e:	f7fe faa1 	bl	8000dd4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800289a:	429a      	cmp	r2, r3
 800289c:	d241      	bcs.n	8002922 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028be:	637a      	str	r2, [r7, #52]	; 0x34
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3314      	adds	r3, #20
 80028d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	613b      	str	r3, [r7, #16]
   return(result);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f2:	623a      	str	r2, [r7, #32]
 80028f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e00f      	b.n	8002942 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d09f      	beq.n	8002880 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3740      	adds	r7, #64	; 0x40
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002986:	f023 030c 	bic.w	r3, r3, #12
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <UART_SetConfig+0x114>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff fcea 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	e002      	b.n	80029c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029bc:	f7ff fcd2 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <UART_SetConfig+0x118>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	0119      	lsls	r1, r3, #4
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <UART_SetConfig+0x118>)
 80029fa:	fba3 0302 	umull	r0, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2064      	movs	r0, #100	; 0x64
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	; 0x32
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <UART_SetConfig+0x118>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a18:	4419      	add	r1, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <UART_SetConfig+0x118>)
 8002a32:	fba3 0302 	umull	r0, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	3332      	adds	r3, #50	; 0x32
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	440a      	add	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013800 	.word	0x40013800
 8002a64:	51eb851f 	.word	0x51eb851f

08002a68 <memset>:
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4402      	add	r2, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	4d0c      	ldr	r5, [pc, #48]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7e:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	f000 f81a 	bl	8002ac0 <_init>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	4d0a      	ldr	r5, [pc, #40]	; (8002ab8 <__libc_init_array+0x40>)
 8002a90:	4c0a      	ldr	r4, [pc, #40]	; (8002abc <__libc_init_array+0x44>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002b60 	.word	0x08002b60
 8002ab4:	08002b60 	.word	0x08002b60
 8002ab8:	08002b60 	.word	0x08002b60
 8002abc:	08002b64 	.word	0x08002b64

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
